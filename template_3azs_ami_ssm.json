{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based on the region in which the stack is run. This example creates an EC2 security group for the instance to give you SSH access. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",

  "Parameters" : {
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the bastion host",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "SSHLocation" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "EC2InstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "t3.micro",
      "AllowedValues" : [ "t2.micro", "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"]
,
      "ConstraintDescription" : "must be a valid EC2 instance type."
    }
  },

  "Mappings" : {
    "SubnetConfig" : {
      "VPC"     : { "CIDR" : "196.0.0.0/16" },
      "Public1"  : { "CIDR" : "196.0.1.0/24" },
      "Public2"  : { "CIDR" : "196.0.2.0/24" },
      "Public3"  : { "CIDR" : "196.0.3.0/24" },
      "Private1"  : { "CIDR" : "196.0.4.0/24" },
      "Private2"  : { "CIDR" : "196.0.5.0/24" },
      "Private3"  : { "CIDR" : "196.0.6.0/24" }
    },

    "AWSInstanceType2Arch" : {
      "t3.micro"    : { "Arch" : "HVM64"  }
    },

    "AWSInstanceType2NATArch" : {
      "t3.micro"    : { "Arch" : "NATHVM64" }
    },

    "AWSRegionArch2AMI" : {
      "us-east-1" : {"HVM64" : "ami-013be31976ca2c322"}
    }
  },

  "Resources" : {
    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "EnableDnsSupport" : true,
        "EnableDnsHostnames" : true,
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ]},
        "Tags" : [
          { "Key" : "Name", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Public"}
         ]
      }
    },

    "PrivateSubnet1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : "us-east-1a",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Private1", "CIDR" ]},
        "VpcId" : { "Ref" : "VPC" },
                "Tags" : [
          { "Key" : "Name", "Value" : "Private Subnet 1" },
          { "Key" : "Application", "Value" : {"Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Private"  } ]
      },
      "DependsOn" : "VPC"
    },

    "PrivateSubnet2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : "us-east-1b",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Private2", "CIDR" ]},
        "VpcId" : { "Ref" : "VPC" },
                "Tags" : [
          { "Key" : "Name", "Value" : "Private Subnet 2" },
          { "Key" : "Application", "Value" : {"Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Private"  } ]
      },
      "DependsOn" : "VPC"
    },

    "PrivateSubnet3" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : "us-east-1c",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Private3", "CIDR" ]},
        "VpcId" : { "Ref" : "VPC" },
                "Tags" : [
          { "Key" : "Name", "Value" : "Private Subnet 3" },
          { "Key" : "Application", "Value" : {"Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Private"  } ]
      },
      "DependsOn" : "VPC"
    },

    "PublicSubnet1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : "us-east-1a",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public1", "CIDR" ]},
        "VpcId" : { "Ref" : "VPC" },
                "Tags" : [
          { "Key" : "Name", "Value" : "Public Subnet 1" },
          { "Key" : "Application", "Value" : {"Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Public"  } ]
      },
      "DependsOn" : "VPC"
    },

    "PublicSubnet2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : "us-east-1b",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public2", "CIDR" ]},
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Name", "Value" : "Public Subnet 2" },
          { "Key" : "Application", "Value" : {"Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Public"  } ]
      },
      "DependsOn" : "VPC"
    },

    "PublicSubnet3" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : "us-east-1c",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public3", "CIDR" ]},
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Name", "Value" : "Public Subnet 3" },
          { "Key" : "Application", "Value" : {"Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Public"  } ]
      },
      "DependsOn" : "VPC"
    },

    "IGW" : {
      "Type" : "AWS::EC2::InternetGateway",
         "Properties" : {
            "Tags" : [
              {"Key" : "Name", "Value" : "ProjetinhoCF IGW"},
              { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
              { "Key" : "Network", "Value" : "Public" }
            ]
         }
    },

    "GatewayToInternet" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "DependsOn" : "VPC",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "IGW" }
       }
    },

    "PublicRouteTable1" : {
      "Type" : "AWS::EC2::RouteTable",
         "Properties" : {
            "VpcId" : { "Ref" : "VPC" },
            "Tags" : [
              { "Key" : "Name", "Value" : "ProjetinhoCF Route Table 1" },
              { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
              { "Key" : "Network", "Value" : "Public" }
           ]
         }
    },

    "PublicRoute1" : {
         "Type" : "AWS::EC2::Route",
         "DependsOn" : "IGW",
         "Properties" : {
            "RouteTableId" : { "Ref" : "PublicRouteTable1" },
            "DestinationCidrBlock" : "0.0.0.0/0",
            "GatewayId" : { "Ref" : "IGW" }
         }
      },


    "PublicSubnetRouteTableAssociation1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet1" },
        "RouteTableId" : { "Ref" : "PublicRouteTable1" }
      }
    },

    "PublicRouteTable2" : {
      "Type" : "AWS::EC2::RouteTable",
         "Properties" : {
            "VpcId" : { "Ref" : "VPC" },
            "Tags" : [
              { "Key" : "Name", "Value" : "ProjetinhoCF Route Table 2" },
              { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
              { "Key" : "Network", "Value" : "Public" }
           ]
         }
    },

    "PublicRoute2" : {
         "Type" : "AWS::EC2::Route",
         "DependsOn" : "IGW",
         "Properties" : {
            "RouteTableId" : { "Ref" : "PublicRouteTable2" },
            "DestinationCidrBlock" : "0.0.0.0/0",
            "GatewayId" : { "Ref" : "IGW" }
         }
      },


    "PublicSubnetRouteTableAssociation2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet2" },
        "RouteTableId" : { "Ref" : "PublicRouteTable2" }
      }
    },

    "PublicRouteTable3" : {
      "Type" : "AWS::EC2::RouteTable",
         "Properties" : {
            "VpcId" : { "Ref" : "VPC" },
            "Tags" : [
              { "Key" : "Name", "Value" : "ProjetinhoCF Route Table 3" },
              { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
              { "Key" : "Network", "Value" : "Public" }
           ]
         }
    },

    "PublicRoute3" : {
         "Type" : "AWS::EC2::Route",
         "DependsOn" : "IGW",
         "Properties" : {
            "RouteTableId" : { "Ref" : "PublicRouteTable3" },
            "DestinationCidrBlock" : "0.0.0.0/0",
            "GatewayId" : { "Ref" : "IGW" }
         }
      },


    "PublicSubnetRouteTableAssociation3" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet3" },
        "RouteTableId" : { "Ref" : "PublicRouteTable3" }
      }
    },

    "EC2Host1" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : { "Ref" : "EC2InstanceType" },
        "KeyName"  : { "Ref" : "KeyName" },
        "ImageId"  : "ami-0687936003370ca74",
        "NetworkInterfaces" : [{
          "GroupSet"                 : [{ "Ref" : "EC2SecurityGroup" }],
          "AssociatePublicIpAddress" : "false",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "SubnetId"                 : { "Ref" : "PrivateSubnet1" }
        }],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",
          "sudo su",
          "status amazon-ssm-agent\n",
          "start amazon-ssm-agent\n",
          "nginx\n"
        ]]}}
      }
    },

    "EC2Host2" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : { "Ref" : "EC2InstanceType" },
        "KeyName"  : { "Ref" : "KeyName" },
        "ImageId"  : "ami-0687936003370ca74",
        "NetworkInterfaces" : [{
          "GroupSet"                 : [{ "Ref" : "EC2SecurityGroup" }],
          "AssociatePublicIpAddress" : "false",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "SubnetId"                 : { "Ref" : "PrivateSubnet2" }
        }],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",
          "sudo su",
          "status amazon-ssm-agent\n",
          "start amazon-ssm-agent\n",
          "nginx\n"
        ]]}}
      }
    },

    "EC2Host3" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : { "Ref" : "EC2InstanceType" },
        "KeyName"  : { "Ref" : "KeyName" },
        "ImageId"  : "ami-0687936003370ca74",
        "NetworkInterfaces" : [{
          "GroupSet"                 : [{ "Ref" : "EC2SecurityGroup" }],
          "AssociatePublicIpAddress" : "false",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "SubnetId"                 : { "Ref" : "PrivateSubnet3" }
        }],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",
          "sudo su",
          "status amazon-ssm-agent\n",
          "start amazon-ssm-agent\n",
          "nginx\n"
        ]]}}
      }
    },

    "EC2SecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access to the EC2 via ELB",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
        {
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "SourceSecurityGroupId" : { "Ref" : "ELBSecurityGroup"}
        } ]
      }
    },

    "ELBSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access to the EC2 host via ELB",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
        {
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" : "0.0.0.0/0"
        } ]
      }
    },

    "LoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Name": {
                    "Ref": "AWS::StackName"
                },
                "Subnets": [
                  {"Ref": "PublicSubnet1"},
                  {"Ref": "PublicSubnet2"},
                  {"Ref": "PublicSubnet3"}
                ],
                "SecurityGroups": [
                    {
                        "Ref": "ELBSecurityGroup"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },

    "LoadBalancerListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "LoadBalancerArn": {
                    "Ref": "LoadBalancer"
                },
                "Port": 80,
                "Protocol": "HTTP",
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "DefaultTargetGroup"
                        }
                    }
                ]
            }
        },

    "DefaultTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "Name": { "Fn::Sub": "${AWS::StackName}-default" },
                "VpcId": { "Ref": "VPC" },
                "TargetType" : "instance",
                "Targets": [
                  { "Id": {"Ref" : "EC2Host1"}, "Port": 80 },
                  { "Id": {"Ref" : "EC2Host2"}, "Port": 80 },
                  { "Id": {"Ref" : "EC2Host3"}, "Port": 80 }
                ],
                "Port": 80,
                "Protocol": "HTTP",
                "HealthCheckPath": "/tech-u/index.html",
                "HealthCheckIntervalSeconds" : 300,
                "HealthCheckTimeoutSeconds" : 60,
                "HealthyThresholdCount" : 2,
                "UnhealthyThresholdCount" : 10,
                "HealthCheckProtocol" : "HTTP"
            }
        },

        "RolePolicies": {
         "Type": "AWS::IAM::Policy",
          "Properties": {
            "PolicyName": "root",
            "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ssm:DescribeAssociation",
                            "ssm:GetDeployablePatchSnapshotForInstance",
                            "ssm:GetDocument",
                            "ssm:GetManifest",
                            "ssm:GetParameters",
                            "ssm:ListAssociations",
                            "ssm:ListInstanceAssociations",
                            "ssm:PutInventory",
                            "ssm:PutComplianceItems",
                            "ssm:PutConfigurePackageResult",
                            "ssm:UpdateAssociationStatus",
                            "ssm:UpdateInstanceAssociationStatus",
                            "ssm:UpdateInstanceInformation"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ssmmessages:CreateControlChannel",
                            "ssmmessages:CreateDataChannel",
                            "ssmmessages:OpenControlChannel",
                            "ssmmessages:OpenDataChannel"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ec2messages:AcknowledgeMessage",
                            "ec2messages:DeleteMessage",
                            "ec2messages:FailMessage",
                            "ec2messages:GetEndpoint",
                            "ec2messages:GetMessages",
                            "ec2messages:SendReply"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "cloudwatch:PutMetricData"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ec2:DescribeInstanceStatus"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ds:CreateComputer",
                            "ds:DescribeDirectories"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "logs:CreateLogGroup",
                            "logs:CreateLogStream",
                            "logs:DescribeLogGroups",
                            "logs:DescribeLogStreams",
                            "logs:PutLogEvents"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "s3:GetBucketLocation",
                            "s3:PutObject",
                            "s3:GetObject",
                            "s3:GetEncryptionConfiguration",
                            "s3:AbortMultipartUpload",
                            "s3:ListMultipartUploadParts",
                            "s3:ListBucket",
                            "s3:ListBucketMultipartUploads"
                        ],
                        "Resource": "*"
                    }
                ]
            },
            "Roles": [ {"Ref": "RootRole"} ]
          }
        },

          "RootInstanceProfile": {
             "Type": "AWS::IAM::InstanceProfile",
             "Properties": {
                "Path": "/",
                "Roles": [ {"Ref": "RootRole"} ]
             }
          }
      }
  },

  "Outputs" : {
    "VPCId" : {
      "Description" : "VPCId of the newly created VPC",
      "Value" :  { "Ref" : "VPC" }
    },
    "PublicSubnet1" : {
      "Description" : "SubnetId of the public subnet",
      "Value" :  { "Ref" : "PublicSubnet1" }
    },
    "PublicSubnet2" : {
      "Description" : "SubnetId of the public subnet",
      "Value" :  { "Ref" : "PublicSubnet2" }
    },
    "DNSName1" : {
      "Description" : "DNS Name of the EC2 host",
      "Value" :  { "Fn::GetAtt" : ["EC2Host1", "PublicDnsName"] }
    },
    "DNSName2" : {
      "Description" : "DNS Name of the EC2 host",
      "Value" :  { "Fn::GetAtt" : ["EC2Host2", "PublicDnsName"] }
    },
    "LoadBalancerUrl": {
        "Description": "The URL of the ALB",
        "Value": {
            "Fn::GetAtt": [
                "LoadBalancer",
                "DNSName"
            ]
        }
    }
  }
}
